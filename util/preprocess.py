import numpy as np
from PIL import Image
from scipy.misc import imresize


class Preprocessor(object):
    """
    Preprocessing the observation generated by environment.
    """

    def process(self, input_vector):
        return


class MaxOverImagePrep(Preprocessor):
    def __init__(self, size=2):
        self._size = size
        self._image_stack = np.zeros([self._size, 210, 160, 3], dtype=np.uint8)
        self._current = 0

    def process(self, rgb_img):
        self._image_stack[self._current] = rgb_img
        self._current = (self._current + 1) % self._size
        return np.maximum(self._image_stack[0], self._image_stack[1])

    def display(self, index=-1):
        if index == -1:
            for i in range(self._size):
                Image.fromarray(self._image_stack[i]).show()
        else:
            Image.fromarray(self._image_stack[index]).show()


class RGBToGrayPrep(Preprocessor):
    def process(self, rgb_img):
        return np.dot(rgb_img[..., :3], [0.299, 0.587, 0.114]).astype(np.uint8)


class ResizePrep(Preprocessor):
    def __init__(self, shape):
        self._shape = shape

    def process(self, img):
        return imresize(img, self._shape)


class ImageDTypePrep(Preprocessor):
    def process(self, img):
        """
        :type img: np.ndarray
        """
        if img.dtype == np.uint8:
            return (img / 255.).astype(np.float32)
        elif img.dtype == np.float16:
            return (img * 255.).astype(np.uint8)
        else:
            raise Exception('Unknown data type.')


class HistoryStackPrep(Preprocessor):
    def __init__(self, shape, size=4):
        self._size = size
        self._image_stack = np.zeros(shape + (self._size,), dtype=np.uint8)
        self._current = 0
        self._initial = False

    def process(self, rgb_img):
        if not self._initial:
            for i in range(self._size):
                self._image_stack[..., i] = rgb_img
            self._initial = True
        self._image_stack[..., self._current] = rgb_img
        self._current = (self._current + 1) % self._size
        return self._image_stack


class DQNPrep(Preprocessor):
    def __init__(self):
        self._preprocessor = [MaxOverImagePrep(),
                              RGBToGrayPrep(),
                              ResizePrep((84, 84)),
                              HistoryStackPrep((84, 84))]

    def process(self, s):
        for p in self._preprocessor:
            s = p.process(s)
        return s
